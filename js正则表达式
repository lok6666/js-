1 . 正则表达式是对字符串和特殊字符的一种逻辑公式，用来匹配字符串。
2 .#正则表达式两种创建方式#
  2.1 . ##字面量##
     var  a = //gi;
  2.2 . ##RexExp构造函数##
     var a = new RegExp(//,"g(全局)i(忽略大小写)");
3 .#正则表达式匹配字符串#
  3.1##字符串方法##
     "acac".replace(//gi,"x");
  3.2##正则对象方法##
      var regExp = /a/gi;//思考如果加了g，循环了若干次后是true还是false，这是为什么？test中的lastIndex
       console.log(regExp.test("ab"));//true
       console.log(regExp.test("ab"));//false 为什么？
       console.log(regExp.test("ab"));//true
       console.log(regExp.test("ab"));//false 
4 .#正则表达式相关字符#
  4.1\d匹配数字。“0\d\d”可以匹配“006”
  4.2\w匹配任意字母或数字。"a\w"匹配"aa".
  4.2.匹配任意字符。"a."匹配"as","aw","ar".
  4.4+表示最少一个字符，？表示最多一个字符，{n}表示n个字符，{n，m}n->m个字符。
  4.5\s匹配一个空格。
  4.6[]表示范围，[abc]代表abc中任意一个字符。[^代表字符取反]，[^abc]代表非abc中的任意一个字符.
  4.7-代表范围，[a-c3-6]。
  4.8a|b匹配a或者b。
  4.9^表示行开头，^\d表示数字开头，$表示结束，\d$表示数字结尾。
5，#切分字符串#
  'a b   c'.split(' '); // ['a', 'b', '', '', 'c']
  'a,b;; c  d'.split(/[\s\,\;]+/); // ['a', 'b', 'c', 'd']
