JS函数调用时实参数量可以与形参不一致
实参数量大于形参的情况（通过函数对象属性arguments获得所有实参、类数组对象）
实参数量小于形参的情况（少的参数值为undefined、可使用| |来给出默认值）
不同类型的数据，参数传递方式不同
实参为基本数据类型时，形参改变不影响实参（值传递）
实参为引用类型时，形参改变影响实参（引用传递）
js预解析
JS的解析和执行过程
1, 全局预解析阶段（全局变量和函数声明前置）
2, 全局顺序执行阶段（变量赋值、函数调用等操作）
3, 当遇到函数调用时，在执行函数内代码前，进行函数范围内的预解析
4, 当存在函数嵌套时，以此类推，会进行多次函数预解析
js主要工作：
1,解析器在执行代码前的进行代码扫描（var、function）
2, 将变量和函数声明在当前作用域（全局、函数）内进行提升

js预解析作用：变量的声明，和函数的提升。


例：console.log(a);       var a;
var a = 1;           ->   console.log(a);  
console.log(a);            a =1;
                          console.log(a);  
js采用的静态词法作用域，代码完成后作用域链已经形成，与代码执行顺序无关。
在函数外不能直接访问函数的局部变量
函数内访问同名变量时，局部变量会覆盖全局变量
js作用域：就是变量和函数的可访问范围。
作用域控制着变量与函数的可见性和生命周期，它也是根据名称查找变量的一套规则
js作用域特点
1，Js采用的是词法作用域，这种静态作用域决定了一个变量的作用域。
2，词法作用域不会被函数从哪里调用等因素。与调用形式无关。
3，通过new Function创建的函数对象不一定遵从静态词法作用域。
4，大多数语言都有块级作用域。
5，ES5采用的为函数作用域。无块级作用域(变量共存，变量污染。通过IIFE解决)
IIFE Immediately-Invoked Function Expression（立即执行函数表达式）
1，使用小括号写法。(function foo( x,y){ ... }(2,3))
2，与运算符结合。（先运行函数，在进行运算）
!function(x,y){
    return x==y?true:false; 
}("5",5);
false
闭包
闭包是由函数和与其相关的引用环境组合而成的实体
闭包是词法作用域中的函数和其相关变量的包裹体
闭包的作用
可通过闭包来访问隐藏在函数作用域内的局部变量
使得函数中的变量都被保存在内存中不被释放
